{
    "$schema": "http://json-schema.org/schema#",
    "type": "object",
    "properties": {
        "image": {
            "type": ["object", "null"],
            "properties": {
                "name": {
                    "description": "Name of the application image. If not specified, the name of the Helm release will be used.",
                    "type": ["string", "null"]
                },
                "tag": {
                    "description": "Tag of the application image",
                    "type": ["string", "null"],
                    "default": "latest"
                }
            }
        },
        "build": {
            "description": "Configuration to build the application image",
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Enable/Disable building the application image",
                    "type": "boolean",
                    "default": true
                },
                "mode": {
                    "description": "Which mode to use to build the application",
                    "type": "string",
                    "enum": ["s2i", "bootable-jar"],
                    "default": "s2i"
                },
                "uri": {
                    "description": "URI of GitHub repository",
                    "type": "string"
                },
                "ref": {
                    "description": "Git reference",
                    "type": ["string", "null"]
                },
                "contextDir": {
                    "description": "Context directory within your Git repo to use as the root for the build",
                    "type": ["string", "null"]
                },
                "sourceSecret": {
                  "description": "Name of the Secret to use when cloning Git source project",
                  "type": ["string", "null"]
                },
                "pullSecret": {
                  "description": "Name of the Pull Secret",
                  "type": ["string", "null"]
                },
                "output": {
                  "description": "Configuration for the built application image",
                  "type": "object",
                  "properties": {
                    "kind": {
                      "description": "Determines where the application images will be pushed",
                      "type": "string",
                      "enum": ["ImageStreamTag", "DockerImage"],
                      "default": "ImageStreamTag"
                    },
                    "pushSecret": {
                      "description": "Name of the Push Secret",
                      "type": ["string", "null"]
                    }
                  }
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "items": {
                      "description": "EnvVar represents an environment variable present in a Container.",
                      "properties": {
                        "name": {
                          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "valueFrom": {
                          "description": "EnvVarSource represents a source for the value of an EnvVar.",
                          "properties": {
                            "configMapKeyRef": {
                              "description": "Selects a key from a ConfigMap.",
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "optional": {
                                  "description": "Specify whether the ConfigMap or its key must be defined",
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "key"
                              ],
                              "type": "object"
                            },
                            "fieldRef": {
                              "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                              "properties": {
                                "apiVersion": {
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "fieldPath": {
                                  "description": "Path of the field to select in the specified API version.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "fieldPath"
                              ],
                              "type": "object"
                            },
                            "resourceFieldRef": {
                              "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                              "properties": {
                                "containerName": {
                                  "description": "Container name: required for volumes, optional for env vars",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "divisor": {
                                  "oneOf": [
                                    {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    {
                                      "type": "integer"
                                    }
                                  ]
                                },
                                "resource": {
                                  "description": "Required: resource to select",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "resource"
                              ],
                              "type": "object"
                            },
                            "secretKeyRef": {
                              "description": "SecretKeySelector selects a key of a Secret.",
                              "properties": {
                                "key": {
                                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "optional": {
                                  "description": "Specify whether the Secret or its key must be defined",
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "key"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                },
                "resources": {
                    "description": "Freeform resources field. More information: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
                },
                "images": {
                    "description": "Freeform images injected in the source during build."
                },
                "triggers": {
                    "description": "Webhooks to trigger building the application image",
                    "type": ["object", "null"],
                    "properties": {
                      "githubSecret": {
                        "description": "Name of the secret containing the WebHookSecretKey for the GitHub Webhook",
                        "type": "string"
                      },
                      "genericSecret": {
                        "description": "Name of the secret containing the WebHookSecretKey for the Generic Webhook",
                        "type": "string"
                      }
                    }
                },
                "s2i": {
                    "description": "Configuration specific to S2I Build (applicable only if build mode is set to s2i)",
                    "type": ["object", "null"],
                    "properties": {
                        "kind": {
                          "description": "Determines the type of images for S2I Builder and Runtime images",
                          "type": "string",
                          "enum": ["ImageStreamTag", "DockerImage", "ImageStreamImage"],
                          "default": "DockerImage"
                        },
                        "buildApplicationImage": {
                          "description": "Determine if the application image must be built. If false, the Helm release will  build the first artifact image (with the name of the Helm release)",
                          "type": "boolean",
                          "default": true
                        },
                        "builderImage": {
                            "description": "Name of WildFly Builder image",
                            "type": ["string", "null"]
                        },
                        "builderKind": {
                          "description": "Determines the type of images for S2I Builder image. If omitted, the value of the kind properties is used",
                          "type":  ["string", "null"],
                          "enum": ["ImageStreamTag", "DockerImage", "ImageStreamImage"]
                        },
                        "runtimeImage": {
                            "description": "Name of WildFly Runtime image",
                            "type": ["string", "null"]
                        },
                        "runtimeKind": {
                          "description": "Determines the type of images for S2I Runtime image. If omitted, the value of the kind properties is used",
                          "type":  ["string", "null"],
                          "enum": ["ImageStreamTag", "DockerImage", "ImageStreamImage"]
                        },
                        "featurePacks": {
                          "description": "List of Galleon feature-packs identified by Maven coordinates (`<groupId>:<artifactId>:<version>`). Deprecated, the recommended way to provision WildFly is to use the wildfly-maven-plugin in the application pom.xml",
                          "type": ["string", "array", "null"],
                          "items": {
                            "type": "string"
                          }
                        },
                        "galleonDir": {
                          "description": "Directory relative to the root directory for the build that contains custom content for Galleon.",
                          "type": ["string", "null"]
                        },
                        "galleonLayers": {
                            "description": "List of Galleon Layers to provision. If galleonLayers are configured, the featurePacks that provides the layers must be specified (including WildFly feature pack). Deprecated, the recommended way to provision WildFly is to use the wildfly-maven-plugin in the application pom.xml",
                            "type": ["string", "array", "null"],
                            "items": {
                              "type": "string"
                            }
                        }
                    }
                },
                "bootableJar": {
                  "description": "Configuration specific to Bootable Jar Build (applicable only if build mode is set to bootable-jar)",
                  "type": ["object", "null"],
                  "properties": {
                      "builderImage": {
                          "description": "The JDK Builder image",
                          "type": ["string", "null"]
                      }
                  }
                }
            }
        },
        "deploy": {
            "description": "Configuration to deploy the application",
            "type": "object",
            "properties": {
              "annotations": {
                "type": "object",
                "description": "Annotations that are applied to the deployed application and its pods",
                "additionalProperties": {
                  "type": "string"
                }
              },
                "enabled": {
                    "description": "Enable/Disable deploying the application image",
                    "type": "boolean",
                    "default": true
                },
                "replicas": {
                    "type": "integer",
                    "description": "Number of pod replicas to deploy"
                },
                "labels": {
                  "type": "object",
                  "description": "Labels that are applied to the deployed application and its pods",
                  "additionalProperties": {
                    "type":"string"
                  }
                },
                "resources": {
                    "description": "Freeform resources requirements to deploy the application image"
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "items": {
                      "description": "EnvVar represents an environment variable present in a Container.",
                      "properties": {
                        "name": {
                          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "valueFrom": {
                          "description": "EnvVarSource represents a source for the value of an EnvVar.",
                          "properties": {
                            "configMapKeyRef": {
                              "description": "Selects a key from a ConfigMap.",
                              "properties": {
                                "key": {
                                  "description": "The key to select.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "optional": {
                                  "description": "Specify whether the ConfigMap or its key must be defined",
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "key"
                              ],
                              "type": "object"
                            },
                            "fieldRef": {
                              "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                              "properties": {
                                "apiVersion": {
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "fieldPath": {
                                  "description": "Path of the field to select in the specified API version.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "fieldPath"
                              ],
                              "type": "object"
                            },
                            "resourceFieldRef": {
                              "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                              "properties": {
                                "containerName": {
                                  "description": "Container name: required for volumes, optional for env vars",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "divisor": {
                                  "oneOf": [
                                    {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    {
                                      "type": "integer"
                                    }
                                  ]
                                },
                                "resource": {
                                  "description": "Required: resource to select",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "resource"
                              ],
                              "type": "object"
                            },
                            "secretKeyRef": {
                              "description": "SecretKeySelector selects a key of a Secret.",
                              "properties": {
                                "key": {
                                  "description": "The key of the secret to select from.  Must be a valid secret key.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "optional": {
                                  "description": "Specify whether the Secret or its key must be defined",
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "key"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "required": [
                        "name"
                      ],
                      "type": "object"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "items": {
                      "description": "EnvFromSource represents the source of a set of ConfigMaps",
                      "properties": {
                        "configMapRef": {
                          "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "optional": {
                              "description": "Specify whether the ConfigMap must be defined",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "prefix": {
                          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "secretRef": {
                          "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                          "properties": {
                            "name": {
                              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "optional": {
                              "description": "Specify whether the Secret must be defined",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                },
                "ingress": {
                    "description": "Ingress configuration",
                    "type": "object",
                    "properties": {
                        "className": {
                          "description": "Configure the `ingressClassName` which is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. If not set the default `ingressClass` defined on the cluster is used.",
                          "type": "string"
                        },
                        "enabled": {
                            "description": "Determines if a `Ingress` configuration should be created",
                            "default": false,
                            "type": "boolean"
                        },
                        "host": {
                          "description": "is an alias/DNS that is used as endpoint for inbound traffic.",
                          "type": "string"
                        },
                        "path": {
                          "description": "The path that an incoming request must match before the load balancer directs traffic to the referenced Service.",
                          "default": "/",
                          "type": "string"
                        },
                        "pathType": {
                          "description": "Each path in an Ingress is required to have a corresponding path type to define how the path is matched.",
                          "enum": ["ImplementationSpecific", "Exact", "Prefix"],
                          "default": "Prefix",
                          "type": "string"
                        },
                        "tls": {
                          "description": "TLS Configuration for Ingress",
                          "type": "object",
                          "properties": {
                            "secret": {
                              "description": "Name of the secret which contains the certificates to use for TLS.",
                              "type": "string"
                            }
                          }
                        }
                    }
                },
                "route": {
                    "description": "Route configuration",
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "description": "Enable/Disable creating a Route for the application",
                            "default": true,
                            "type": "boolean"
                        },
                        "host": {
                          "description": "alias/DNS that points to the service. If not specified a route name will typically be automatically chosen",
                          "type": "string"
                        },
                        "tls": {
                          "description": "TLS Configuration for the Route",
                          "type": "object",
                          "properties": {
                            "enabled" : {
                              "description": "Determines if the Route should be TLS-encrypted. If deploy.tls.enabled is true, the route will use the secure service to access to the deployment",
                              "default": true,
                              "type": "boolean"
                            },
                            "termination": {
                              "description": "Determines the type of TLS termination to use",
                              "type": "string",
                              "enum": ["edge", "reencrypt", "passthrough"],
                              "default": "edge"
                            },
                            "insecureEdgeTerminationPolicy": {
                              "description": "Determines if insecure traffic should be redirected",
                              "type": "string",
                              "enum": ["Allow", "Disable", "Redirect"],
                              "default": "Redirect"
                            }
                          }
                        }
                    }
                },
                "tls": {
                  "description": "TLS Configuration",
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "description": "Enable the creation of a secure service to access the application.",
                      "default": false,
                      "type": "boolean"
                    }
                  }
                },
                "livenessProbe": {
                  "type": "object",
                  "description": "livenessProbe describes a health check to be performed against a container to determine whether it is alive.",
                  "properties": {
                    "exec": {
                      "description": "Exec specifies the action to take.",
                      "type": "object",
                      "properties": {
                        "command": {
                          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "atomic"
                        }
                      }
                    },
                    "failureThreshold": {
                      "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "grpc": {
                      "required": [
                        "port"
                      ],
                      "type": "object",
                      "description": "GRPC specifies an action involving a GRPC port.",
                      "properties": {
                        "port": {
                          "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "service": {
                          "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                          "type": "string"
                        }
                      }
                    },
                    "httpGet": {
                      "description": "HTTPGet specifies the http request to perform.",
                      "properties": {
                        "host": {
                          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                          "type": "string"
                        },
                        "httpHeaders": {
                          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                          "type": "array",
                          "x-kubernetes-list-type": "atomic",
                          "items": {
                            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                "type": "string"
                              },
                              "value": {
                                "description": "The header field value",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "value"
                            ]
                          }
                        },
                        "path": {
                          "description": "Path to access on the HTTP server.",
                          "type": "string"
                        },
                        "port": {
                          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        },
                        "scheme": {
                          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "port"
                      ],
                      "type": "object"
                    },
                    "initialDelaySeconds": {
                      "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "periodSeconds": {
                      "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "successThreshold": {
                      "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "tcpSocket": {
                      "required": [
                        "port"
                      ],
                      "type": "object",
                      "description": "TCPSocket specifies an action involving a TCP port.",
                      "properties": {
                        "host": {
                          "description": "Optional: Host name to connect to, defaults to the pod IP.",
                          "type": "string"
                        },
                        "port": {
                          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        }
                      }
                    },
                    "terminationGracePeriodSeconds": {
                      "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                      "format": "int64",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "timeoutSeconds": {
                      "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    }
                  }
                },
                "readinessProbe": {
                  "type": "object",
                  "description": "ReadinessProbe describes a health check to be performed against a container to determine whether it is ready.",
                  "properties": {
                    "exec": {
                      "description": "Exec specifies the action to take.",
                      "type": "object",
                      "properties": {
                        "command": {
                          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "atomic"
                        }
                      }
                    },
                    "failureThreshold": {
                      "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "grpc": {
                      "required": [
                        "port"
                      ],
                      "type": "object",
                      "description": "GRPC specifies an action involving a GRPC port.",
                      "properties": {
                        "port": {
                          "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "service": {
                          "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                          "type": "string"
                        }
                      }
                    },
                    "httpGet": {
                      "description": "HTTPGet specifies the http request to perform.",
                      "properties": {
                        "host": {
                          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                          "type": "string"
                        },
                        "httpHeaders": {
                          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                          "type": "array",
                          "x-kubernetes-list-type": "atomic",
                          "items": {
                            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                "type": "string"
                              },
                              "value": {
                                "description": "The header field value",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "value"
                            ]
                          }
                        },
                        "path": {
                          "description": "Path to access on the HTTP server.",
                          "type": "string"
                        },
                        "port": {
                          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        },
                        "scheme": {
                          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "port"
                      ],
                      "type": "object"
                    },
                    "initialDelaySeconds": {
                      "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "periodSeconds": {
                      "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "successThreshold": {
                      "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "tcpSocket": {
                      "required": [
                        "port"
                      ],
                      "type": "object",
                      "description": "TCPSocket specifies an action involving a TCP port.",
                      "properties": {
                        "host": {
                          "description": "Optional: Host name to connect to, defaults to the pod IP.",
                          "type": "string"
                        },
                        "port": {
                          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        }
                      }
                    },
                    "terminationGracePeriodSeconds": {
                      "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                      "format": "int64",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "timeoutSeconds": {
                      "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    }
                  }
                },
                "startupProbe": {
                  "type": "object",
                  "description": "StartupProbe describes a health check to be performed against a container to determine whether it is alive.",
                  "properties": {
                    "exec": {
                      "description": "Exec specifies the action to take.",
                      "type": "object",
                      "properties": {
                        "command": {
                          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "x-kubernetes-list-type": "atomic"
                        }
                      }
                    },
                    "failureThreshold": {
                      "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "grpc": {
                      "required": [
                        "port"
                      ],
                      "type": "object",
                      "description": "GRPC specifies an action involving a GRPC port.",
                      "properties": {
                        "port": {
                          "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "service": {
                          "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
                          "type": "string"
                        }
                      }
                    },
                    "httpGet": {
                      "description": "HTTPGet specifies the http request to perform.",
                      "properties": {
                        "host": {
                          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                          "type": "string"
                        },
                        "httpHeaders": {
                          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                          "type": "array",
                          "x-kubernetes-list-type": "atomic",
                          "items": {
                            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                "type": "string"
                              },
                              "value": {
                                "description": "The header field value",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "value"
                            ]
                          }
                        },
                        "path": {
                          "description": "Path to access on the HTTP server.",
                          "type": "string"
                        },
                        "port": {
                          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        },
                        "scheme": {
                          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "port"
                      ],
                      "type": "object"
                    },
                    "initialDelaySeconds": {
                      "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "periodSeconds": {
                      "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "successThreshold": {
                      "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "tcpSocket": {
                      "required": [
                        "port"
                      ],
                      "type": "object",
                      "description": "TCPSocket specifies an action involving a TCP port.",
                      "properties": {
                        "host": {
                          "description": "Optional: Host name to connect to, defaults to the pod IP.",
                          "type": "string"
                        },
                        "port": {
                          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        }
                      }
                    },
                    "terminationGracePeriodSeconds": {
                      "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                      "format": "int64",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "timeoutSeconds": {
                      "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    }
                  }
                },
                "volumeMounts": {
                  "description": "Freeform array of volumeMounts",
                  "type": ["array", "null"],
                  "items": {
                    "description": "VolumeMount describes a mounting of a Volume within a container.",
                    "required": ["name", "mountPath"],
                    "properties": {
                      "mountPath": {
                        "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                        "type": "string"
                      },
                      "mountPropagation": {
                        "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationHostToContainer is used. This field is alpha in 1.8 and can be reworked or removed in a future release.",
                        "type": ["string", "null"]
                      },
                      "name": {
                        "description": "This must match the Name of a Volume.",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                        "type": "boolean"
                      },
                      "subPath": {
                        "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                        "type": ["string","null"]
                      }
                    }
                  }
                },
                "volumes": {
                  "description": "Freeform array of volumes",
                    "type": [ "array", "null"]
                },
                "initContainers": {
                  "description": "Freeform array of initContainers",
                  "type": [ "array", "null"]
                },
                "extraContainers": {
                  "description": "Freeform array of extra containers",
                  "type": [ "array", "null"]
                },
                "imagePullSecrets:": {
                  "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling the application image",
                  "type": [ "array", "null"],
                  "items": {
                    "description": "Reference to a secret in the same namespace.",
                    "required": ["name"],
                    "properties": {
                      "name": {
                        "description": "Name of the referenced secret",
                        "type": "string"
                      }
                    }
                  }
                }
            }
        }
    }
}
